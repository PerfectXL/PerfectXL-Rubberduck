<?xml version="1.0" encoding="UTF-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="GitBranchDeleteFailed" xml:space="preserve">
    <value>Das Löschen des Zweiges ist fehlgeschlagen.</value>
  </data>
  <data name="GitCheckoutFailed" xml:space="preserve">
    <value>Das Auschecken ist fehlgeschlagen.</value>
  </data>
  <data name="GitCommitFailed" xml:space="preserve">
    <value>Commit fehlgeschlagen.</value>
  </data>
  <data name="GitFetchFailed" xml:space="preserve">
    <value>Fetch fehlgeschlagen.</value>
  </data>
  <data name="GitFileStageFailed" xml:space="preserve">
    <value>Staging der Datei fehlgeschlagen.</value>
  </data>
  <data name="GitFileStageFailedMsg" xml:space="preserve">
    <value>Staging der Datei' {0}' ist fehlgeschlagen.</value>
  </data>
  <data name="GitNewBranchFailed" xml:space="preserve">
    <value>Die Erzeugung des Zweiges ist fehlgeschlagen.</value>
  </data>
  <data name="GitNoInitialCommit" xml:space="preserve">
    <value>Der initiale Commit konnte nicht ausgeführt werden.</value>
  </data>
  <data name="GitNotInit" xml:space="preserve">
    <value>Das Repository konnte nicht initialisiert werden.</value>
  </data>
  <data name="GitPublishFailed" xml:space="preserve">
    <value>Veröffentlichung fehlgeschlagen.</value>
  </data>
  <data name="GitPullFailed" xml:space="preserve">
    <value>Pull fehlgeschlagen.</value>
  </data>
  <data name="GitPushFailed" xml:space="preserve">
    <value>Push fehlgeschlagen.</value>
  </data>
  <data name="GitRemoveFileStaging" xml:space="preserve">
    <value>Das Entfernen der Datei '{0}' aus dem Stagingbereich ist fehlgeschlagen.</value>
  </data>
  <data name="GitRepoNotCloned" xml:space="preserve">
    <value>Das entfernte Repository konnte nicht geklont werden.</value>
  </data>
  <data name="GitRepoNotFound" xml:space="preserve">
    <value>Repository konnte nicht gefunden werden.</value>
  </data>
  <data name="GitRepoStatusFailed" xml:space="preserve">
    <value>Der Status des Repository konnte nicht aktualisiert werden.</value>
  </data>
  <data name="GitRevertConflict" xml:space="preserve">
    <value>Revert führt zu einem Konflikt. Revert fehlgeschlagen.</value>
  </data>
  <data name="GitRevertFailed" xml:space="preserve">
    <value>Revert fehlgeschlagen.</value>
  </data>
  <data name="GitUndoFailed" xml:space="preserve">
    <value>Rückgängig machen fehlgeschlagen.</value>
  </data>
  <data name="GitUnpublishFailed" xml:space="preserve">
    <value>Unpublish fehlgeschlagen.</value>
  </data>
  <data name="NoProjectOpen">
    <value>There must be a project open for Rubberduck to successfully initialize a repository.</value>
  </data>
</root>
