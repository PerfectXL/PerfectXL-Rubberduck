<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AtomDescription_CarriageReturn" xml:space="preserve">
    <value>Coincide con el carácter ASCII CR</value>
  </data>
  <data name="AtomDescription_CharacterClass" xml:space="preserve">
    <value>Coincide con cualquiera de los siguientes caracteres: {0}</value>
  </data>
  <data name="AtomDescription_CharacterClass_Inverted" xml:space="preserve">
    <value>Coincide con cualquier carácter que no sea uno de: {0}</value>
  </data>
  <data name="AtomDescription_Digit" xml:space="preserve">
    <value>Coincide con cualquier dígito. Equivalente a "[0-9]"</value>
  </data>
  <data name="AtomDescription_Dot" xml:space="preserve">
    <value>Coincide con cualquier carácter</value>
  </data>
  <data name="AtomDescription_FormFeed" xml:space="preserve">
    <value>Coincide con el carácter "Form-Feed"</value>
  </data>
  <data name="AtomDescription_Group" xml:space="preserve">
    <value>Coincide con un grupo de captura '{0}'</value>
  </data>
  <data name="AtomDescription_HTab" xml:space="preserve">
    <value>Coincide con el carácter "Tab" horizontal</value>
  </data>
  <data name="AtomDescription_Literal_ActualLiteral" xml:space="preserve">
    <value>Coincide con el literal '{0}'</value>
  </data>
  <data name="AtomDescription_Literal_Backreference" xml:space="preserve">
    <value>Coincide exactamente con el grupo de captura en la posición {0} vuelve a coincidir</value>
  </data>
  <data name="AtomDescription_Literal_EscapedLiteral" xml:space="preserve">
    <value>Coincide con el literal de escape {0}</value>
  </data>
  <data name="AtomDescription_Literal_HexCodepoint" xml:space="preserve">
    <value>Coincide con el valor hexadecimal ASCII {0}</value>
  </data>
  <data name="AtomDescription_Literal_OctalCodepoint" xml:space="preserve">
    <value>Coincide con el valor ASCII octal {0}</value>
  </data>
  <data name="AtomDescription_Literal_UnicodePoint" xml:space="preserve">
    <value>Coincide con el punto de código de Unicode {0}</value>
  </data>
  <data name="AtomDescription_Newline" xml:space="preserve">
    <value>Coincide con el carácter ASCII LF, también conocido como nueva línea</value>
  </data>
  <data name="AtomDescription_NonDigit" xml:space="preserve">
    <value>Coincide con los no dígitos. Equivalente a "[^\d]"</value>
  </data>
  <data name="AtomDescription_NonWhitespace" xml:space="preserve">
    <value>Coincide con los caracteres que no son espacios en blanco. Equivalente a "[^\s]"</value>
  </data>
  <data name="AtomDescription_NonWordBoundary" xml:space="preserve">
    <value>Asegura que la posición actual no esté en un "límite de palabra"</value>
  </data>
  <data name="AtomDescription_NonWordCharacter" xml:space="preserve">
    <value>Coincide con "caracteres que no son palabras". Equivalente a "[^\w]"</value>
  </data>
  <data name="AtomDescription_VTab" xml:space="preserve">
    <value>Coincide con el carácter "Tab" vertical</value>
  </data>
  <data name="AtomDescription_Whitespace" xml:space="preserve">
    <value>Coincide con cualquier carácter de espacio en blanco. Equivalente a "[\t\r\n\v\f]"</value>
  </data>
  <data name="AtomDescription_WordBoundary" xml:space="preserve">
    <value>Asegura que la posición actual esté en un "límite de palabra"</value>
  </data>
  <data name="AtomDescription_WordCharacter" xml:space="preserve">
    <value>Coincide con cualquier "carácter de la palabra". Equivalente a "[a-zA-Z_0-9]"</value>
  </data>
  <data name="ExpressionDescription_AlternativesExpression" xml:space="preserve">
    <value>Coincide con una de {0} alternativas</value>
  </data>
  <data name="ExpressionDescription_ConcatenatedExpression" xml:space="preserve">
    <value>Coincide con la secuencia literal</value>
  </data>
  <data name="ExpressionDescription_ErrorExpression" xml:space="preserve">
    <value>No se pudo analizar '{0}' como literal.</value>
  </data>
  <data name="PatternDescription_AnchorEnd" xml:space="preserve">
    <value>$ asegura que todos los caracteres de la cadena son consumidos</value>
  </data>
  <data name="PatternDescription_AnchorEnd_GlobalEnabled" xml:space="preserve">
    <value>$ garantiza que la línea terminada o todos los caracteres de la entrada hayan sido consumidos</value>
  </data>
  <data name="PatternDescription_AnchorStart" xml:space="preserve">
    <value>^ ensures we are at the beginning of the string that's to be matched</value>
  </data>
  <data name="PatternDescription_AnchorStart_GlobalEnabled" xml:space="preserve">
    <value>^ asegura que el emparejador comience al principio de una línea</value>
  </data>
  <data name="PatternDescription_IgnoreCase" xml:space="preserve">
    <value>Todas las coincidencias ignoran mayúsculas/minúsculas en los literales</value>
  </data>
  <data name="Quantifer_Plus" xml:space="preserve">
    <value>al menos una vez (1+)</value>
  </data>
  <data name="Quantifier_Asterisk" xml:space="preserve">
    <value>cualquier cantidad de veces (0+)</value>
  </data>
  <data name="Quantifier_ClosedRange" xml:space="preserve">
    <value>entre {0} y {1} veces</value>
  </data>
  <data name="Quantifier_Exact" xml:space="preserve">
    <value>exactamente {0} veces</value>
  </data>
  <data name="Quantifier_None" xml:space="preserve">
    <value>exactamente una vez (1)</value>
  </data>
  <data name="Quantifier_OpenRange" xml:space="preserve">
    <value>al menos {0} veces</value>
  </data>
  <data name="Quantifier_Optional" xml:space="preserve">
    <value>como máximo una vez (1-)</value>
  </data>
</root>