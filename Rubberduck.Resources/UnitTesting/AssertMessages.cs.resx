<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Assert_DimensionMismatchFormat" xml:space="preserve">
    <value>očekáváné má {0} dimenzí; aktuální má {1} dimensí. {2}</value>
    <comment>{0} and {1} are dimension numbers (1, 2, etc.), {2} = message parameter.  This should always be at the end.</comment>
  </data>
  <data name="Assert_EasterEggAssertClassPassed" xml:space="preserve">
    <value>OK. Rubberduck je assertován. Co teď?</value>
    <comment>Reported when an AssertClass is passed as a parameter to a faked function.</comment>
  </data>
  <data name="Assert_EasterEggIFakePassed" xml:space="preserve">
    <value>Očekáváno: Stack overflow?; Aktuální: Ochranná doložka.</value>
    <comment>Reported when an IFake interface is passed as a parameter to a faked function.</comment>
  </data>
  <data name="Assert_EasterEggIVerifyPassed" xml:space="preserve">
    <value>IVerify také.</value>
    <comment>Reported when an IVerify interface is passed as a parameter to a faked function.</comment>
  </data>
  <data name="Assert_FailedMessageFormat" xml:space="preserve">
    <value>{0} assert zkouška selhala. {1}</value>
    <comment>{0} = method placeholder (i.e. AreEqual), {1} = message parameter.  This should always be at the end.</comment>
  </data>
  <data name="Assert_InvalidFakePassThrough" xml:space="preserve">
    <value>Nesprávné nastavení IFake {0}. PassThrough vlastnost musí být False.</value>
    <comment>{0} = name of the function being faked.</comment>
  </data>
  <data name="Assert_LBoundMismatchFormat" xml:space="preserve">
    <value>Rozměr {0}: očekávána hodnota LBound {1}; aktuální hodnota LBound {2}. {3}</value>
    <comment>{0} = dimension number, {1} and {2} = LBound numbers, {3} = message parameter.  This should always be at the end.</comment>
  </data>
  <data name="Assert_NotImplemented" xml:space="preserve">
    <value>Není implementováno.</value>
    <comment>Placeholder text for planned functionality.</comment>
  </data>
  <data name="Assert_ParameterIsNotArrayFormat" xml:space="preserve">
    <value>{0} není typu pole.</value>
    <comment>{0} is either [expected] or [actual]</comment>
  </data>
  <data name="Assert_ParameterResultFormat" xml:space="preserve">
    <value>Očekáváno: {0}; Aktuální: {1}. {2}</value>
    <comment>{0} = expected value, {1} = actual value, {2} = optional user supplied message (always last)</comment>
  </data>
  <data name="Assert_ReferenceValueMismatch" xml:space="preserve">
    <value>[očekáváno] je typu reference a [aktuální] je typu hodnota.</value>
  </data>
  <data name="Assert_UBoundMismatchFormat" xml:space="preserve">
    <value>Rozměr {0}" očekávána hodnota UBound {1}; aktuální hodnota UBound {2}. {3}</value>
    <comment>{0} = dimension number, {1} and {2} = UBound numbers, {3} = message parameter.  This should always be at the end.</comment>
  </data>
  <data name="Assert_UnexpectedArrayFormat" xml:space="preserve">
    <value>[očekáváno] a [aktuální] jsou typu pole. Zvažte použití {0}.</value>
    <comment>{0} is either Assert.SequenceEquals or Assert.NotSequenceEquals.</comment>
  </data>
  <data name="Assert_UnexpectedNullArraysFormat" xml:space="preserve">
    <value>[očekáváno] a [aktuální] jsou "Nothing". Zvažte použití {0}.</value>
    <comment>{0} is either Assert.AreSame or Assert.AreNotSame.</comment>
  </data>
  <data name="Assert_UnexpectedReferenceComparisonFormat" xml:space="preserve">
    <value>[očekáváno] a [aktuální] jsou typu reference. Zvažte použití {0}.</value>
    <comment>{0} is either Assert.AreSame or Assert.AreNotSame.</comment>
  </data>
  <data name="Assert_UnexpectedValueComparisonFormat" xml:space="preserve">
    <value>[očekáváno] a [aktuální] jsou typu hodnota. Zvažte použití {0}.</value>
    <comment>{0} is either Assert.AreEqual or Assert.AreNotEqual.</comment>
  </data>
  <data name="Assert_VerifyNoInvocationFormat" xml:space="preserve">
    <value>Žádná odpovídající volání parametru {0}; Pouze {1} volání. {2}</value>
    <comment>{0} = parameter name, {1} = number of invokes, {2} = optional user supplied message (always last)</comment>
  </data>
  <data name="Assert_VerifyParameterNonNumeric" xml:space="preserve">
    <value>Parametr {0} nebyl u volání {1} číselná hodnota. {2}</value>
    <comment>{0} = parameter name, {1} = invocation under test, {2} = optional user supplied message (always last)</comment>
  </data>
  <data name="Assert_VerifyParameterNotPassed" xml:space="preserve">
    <value>Parametr {0} nebyl u volání {1} předán. {2}</value>
    <comment>{0} = parameter name, {1} = invocation under test, {2} = optional user supplied message (always last)</comment>
  </data>
  <data name="Assert_ValueReferenceMismatch" xml:space="preserve">
    <value>[očekáváno] je typu hodnota a [aktuální] je typu reference.</value>
  </data>
  <data name="Assert_MismatchedTypes" xml:space="preserve">
    <value>[očekáváno] a [aktuální] hodnoty nejsou stejného typu.</value>
  </data>
  <data name="Assert_NeitherParameterIsArray" xml:space="preserve">
    <value>Ani [očekáváno] nebo [aktuální] nejsou typu pole.</value>
  </data>
  <data name="Assert_VerifyInternalErrorMessage" xml:space="preserve">
    <value>Rubberduck nebyl schopen zpracovat výsledky volání.</value>
  </data>
  <data name="Prerequisite_EarlyBindingReferenceMissing" xml:space="preserve">
    <value>Reference, které Rubberduck potřebuje pro testy časných-vazeb, nemůžou být vyřešeny. Je možné, že jsou poškozeny.</value>
  </data>
  <data name="TestRunner_ComException" xml:space="preserve">
    <value>Při běhu testů se vyskytla neočekávaná COM výjimka.</value>
  </data>
  <data name="TestRunner_ExceptionDuringRun" xml:space="preserve">
    <value>Spuštěná testovací metoda skončila výjimkou.</value>
  </data>
  <data name="TestRunner_GenericException" xml:space="preserve">
    <value>Při běhu testů se vyskytla neočekávaná výjimka.</value>
  </data>
  <data name="TestRunner_ModuleInitializeFailure" xml:space="preserve">
    <value>Neznámý problém při pokusu spustit @ModuleInitialize. Modul přeskočen.</value>
  </data>
  <data name="TestRunner_TestInitializeFailure" xml:space="preserve">
    <value>Neznámý problém při pokusu spustit @TestInitialize. Test přeskočen.</value>
  </data>
</root>