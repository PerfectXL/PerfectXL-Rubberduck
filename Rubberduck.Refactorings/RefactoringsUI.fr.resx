<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AnnotateDeclarationDialog_AnnotationLabel" xml:space="preserve">
    <value>Annotation à ajouter:</value>
  </data>
  <data name="AnnotateDeclarationDialog_AddArgumentButtonLabel" xml:space="preserve">
    <value>Ajouter</value>
  </data>
  <data name="AnnotateDeclarationDialog_AdjustAttributeLabel" xml:space="preserve">
    <value>Ajouter/Ajuster l'Attribut</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentsLabel" xml:space="preserve">
    <value>Arguments de l'annotation:</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentTypeHeader" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="AnnotateDeclarationDialog_ArgumentValueHeader" xml:space="preserve">
    <value>Valeur</value>
  </data>
  <data name="AnnotateDeclarationDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Annoter la Déclaration</value>
  </data>
  <data name="AnnotateDeclarationDialog_DeclarationLabel" xml:space="preserve">
    <value>Déclaration:</value>
  </data>
  <data name="AnnotateDeclarationDialog_Instructions" xml:space="preserve">
    <value>Sélectionner une annotation et les valeurs associées.</value>
  </data>
  <data name="AnnotateDeclarationDialog_RemoveArgumentButtonLabel" xml:space="preserve">
    <value>Supprimer</value>
  </data>
  <data name="AnnotateDeclarationDialog_TitleText" xml:space="preserve">
    <value>Annoter la déclaration</value>
  </data>
  <data name="AnnotationArgument_ValidationError_AttributeNameStart" xml:space="preserve">
    <value>Les arguments de type 'Attribute Name' doivent débuter par 'VB_'.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_EmptyArgument" xml:space="preserve">
    <value>Les arguments ne peuvent être laissés vides.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_InspectionName" xml:space="preserve">
    <value>Les arguments de type 'Inspection Name' doivent correspondre au nom d'une inspection existante.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_Newline" xml:space="preserve">
    <value>Les arguments d'annotations doivent tenir sur une seule ligne.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_NotABoolean" xml:space="preserve">
    <value>La valeur des arguments de type 'Boolean' doit être 'True' ou 'False'.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_SpecialCharacters" xml:space="preserve">
    <value>La valeur des arguments ne doit pas contenir de caractères de contrôle.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_TooLong" xml:space="preserve">
    <value>La valeur des arguments ne peut dépasser {0} caractères.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_WhitespaceInAttribute" xml:space="preserve">
    <value>Les arguments de type 'Attribute Name' ne peuvent contenir d'espaces.</value>
  </data>
  <data name="AssignedByValDialog_NewNameAlreadyUsedFormat" xml:space="preserve">
    <value>'{0}' est déjà accessible à cette procédure.</value>
  </data>
  <data name="AssignedByValDialog_MeaninglessNameFormat" xml:space="preserve">
    <value>{0} Considérez utiliser un nom plus descriptif.</value>
  </data>
  <data name="AssignedByValParamQFixDialog_Caption" xml:space="preserve">
    <value>Introduire une variable locale</value>
  </data>
  <data name="AssignedByValParamQFixDialog_InstructionsLabelText" xml:space="preserve">
    <value>Veuillez spécifier le nom à utiliser pour la copie locale du paramètre {0} '{1}'.</value>
  </data>
  <data name="AssignedByValParamQFixDialog_TitleText" xml:space="preserve">
    <value>Nommer la variable locale</value>
  </data>
  <data name="EncapsulateField_InstructionText" xml:space="preserve">
    <value>Veuillez spécifier le nom, l'accessibilité des paramètres, et le type de mutateur pour la nouvelle propriété.</value>
  </data>
  <data name="EncapsulateField_WrapFieldsInPrivateType" xml:space="preserve">
    <value>Envelopper les champs dans une structure 'Private Type'</value>
  </data>
  <data name="EncapsulateField_TitleText" xml:space="preserve">
    <value>Encapsuler le champ</value>
  </data>
  <data name="EncapsulateField_SetterType" xml:space="preserve">
    <value>Type d'assignation:</value>
  </data>
  <data name="EncapsulateField_ReadOnlyCheckBoxContent" xml:space="preserve">
    <value>Lecture seule</value>
  </data>
  <data name="EncapsulateField_PropertyName" xml:space="preserve">
    <value>Nom de la propriété:</value>
  </data>
  <data name="EncapsulateField_PreviewMarker" xml:space="preserve">
    <value>'&lt;===== modifications aux propriétés et déclarations au-dessus de cette ligne =====&gt;</value>
  </data>
  <data name="EncapsulateField_Preview" xml:space="preserve">
    <value>Aperçu:</value>
  </data>
  <data name="EncapsulateField_ParameterName" xml:space="preserve">
    <value>Nom du paramètre:</value>
  </data>
  <data name="EncapsulateField_NameConflictDetected" xml:space="preserve">
    <value>Conflit de nom</value>
  </data>
  <data name="EncapsulateField_Caption" xml:space="preserve">
    <value>Rubberduck - Encapsuler le champ</value>
  </data>
  <data name="EncapsulateField_ArrayHasExternalRedimFormat" xml:space="preserve">
    <value>Impossible d'encapsuler le champ '{0}'. Une ou plusieurs instructions ReDim({0}) existent dans d'autres modules.</value>
  </data>
  <data name="ExtractInterface_PublicInstancingMandatedByPublicClass" xml:space="preserve">
    <value>La classe est publique, l'interface extraite sera donc publique également.
Si une interface privée est nécessaire, veuillez modifier le mode d'instanciation ("instancing") du module de classe pour 'Private'.
Une classe privée peut toujours implémenter une interface publique.</value>
  </data>
  <data name="ExtractInterface_Caption" xml:space="preserve">
    <value>Rubberduck - Extraire une interface</value>
  </data>
  <data name="ExtractInterface_ImplementationOptionsGroupBox" xml:space="preserve">
    <value>Options d'implémentation:</value>
  </data>
  <data name="ExtractInterface_InstancingGroupBox" xml:space="preserve">
    <value>Instanciation</value>
  </data>
  <data name="ExtractInterface_InstructionLabel" xml:space="preserve">
    <value>Veuillez spécifier le nom et les membres de l'interface.</value>
  </data>
  <data name="ExtractInterface_MembersGroupBox" xml:space="preserve">
    <value>Membres</value>
  </data>
  <data name="ExtractInterface_OptionAddEmptyImplementation" xml:space="preserve">
    <value>Ajouter implémentation vide</value>
  </data>
  <data name="ExtractInterface_OptionForwardToInterfaceMembers" xml:space="preserve">
    <value>Les membres appellent l'implémentation</value>
  </data>
  <data name="ExtractInterface_OptionForwardToObjectMembers" xml:space="preserve">
    <value>L'implémentation appelle les membres</value>
  </data>
  <data name="ExtractInterface_OptionReplaceMembersWithInterfaceMembers" xml:space="preserve">
    <value>Remplacer les membres par l'implémentation</value>
  </data>
  <data name="ExtractInterface_TitleLabel" xml:space="preserve">
    <value>Extraire une interface</value>
  </data>
  <data name="ExtractMethod_ParametersLabel" xml:space="preserve">
    <value>Paramètres:</value>
  </data>
  <data name="ExtractMethod_AccessibilityLabel" xml:space="preserve">
    <value>Accessibilité:</value>
  </data>
  <data name="ExtractMethod_Caption" xml:space="preserve">
    <value>Rubberduck - Extraire une Méthode</value>
  </data>
  <data name="ExtractMethod_InstructionsText" xml:space="preserve">
    <value>Veuillez spécifier le nom de la méthode, le type de sa valeur de retour et les paramètres (si applicable).</value>
  </data>
  <data name="ExtractMethod_InvalidSelectionMessage" xml:space="preserve">
    <value>La sélection n'est pas valide.</value>
  </data>
  <data name="ExtractMethod_OutputNone" xml:space="preserve">
    <value>(aucun)</value>
  </data>
  <data name="ExtractMethod_PreviewLabel" xml:space="preserve">
    <value>Prévisualisation:</value>
  </data>
  <data name="ExtractMethod_ReturnLabel" xml:space="preserve">
    <value>Retour:</value>
  </data>
  <data name="ExtractMethod_SetBoxLabel" xml:space="preserve">
    <value>Set</value>
  </data>
  <data name="ExtractMethod_TitleText" xml:space="preserve">
    <value>Extraction d'une méthode</value>
  </data>
  <data name="ImplementInterface_Caption" xml:space="preserve">
    <value>Rubberduck - Implémenter une interface</value>
  </data>
  <data name="ImplementInterfaceFailed_NoImplementsStatementSelected" xml:space="preserve">
    <value>Une instruction 'Implements' doit être sélectionnée.</value>
  </data>
  <data name="IntroduceField_Caption" xml:space="preserve">
    <value>Rubberduck - Introduire un champ</value>
  </data>
  <data name="PromoteToParameter_PromptIfTargetIsInterface" xml:space="preserve">
    <value>La méthode '{0}' implémente '{1}.{2}'. Modifier la signature de l'interface? (se propagera à toutes les implémentations)</value>
  </data>
  <data name="IntroduceFieldFailed_TargetIsAlreadyAField" xml:space="preserve">
    <value>La cible '{0}' est déjà un champ.</value>
  </data>
  <data name="PromoteToParameter_Caption" xml:space="preserve">
    <value>Rubberduck - Introduire un paramètre</value>
  </data>
  <data name="PromoteToParameterFailed_TargetNotContainedInMethod" xml:space="preserve">
    <value>La cible '{0}' n'est pas contenue dans une procédure.</value>
  </data>
  <data name="InvalidNameCriteria_IsNullOrEmpty" xml:space="preserve">
    <value>Un identifiant vide n'est pas valide en VBA.</value>
  </data>
  <data name="InvalidNameCriteria_DoesNotStartWithLetterFormat" xml:space="preserve">
    <value>'{0}' doit débuter par une lettre.</value>
  </data>
  <data name="InvalidNameCriteria_ExceedsMaximumLengthFormat" xml:space="preserve">
    <value>'{0}' excède la longueur maximale permise.</value>
  </data>
  <data name="InvalidNameCriteria_InvalidCharactersFormat" xml:space="preserve">
    <value>'{0}' contient des caractères spéciaux autres que la barre de soulignement.</value>
  </data>
  <data name="InvalidNameCriteria_IsReservedKeywordFormat" xml:space="preserve">
    <value>'{0}' est un mot-clé réservé.</value>
  </data>
  <data name="MoveCloserToUsage_Caption" xml:space="preserve">
    <value>Rubberduck - Rapprocher la déclaration de son utilisation</value>
  </data>
  <data name="MoveCloserToUsageFailure_InvalidSelection" xml:space="preserve">
    <value>Sélection invalide.</value>
  </data>
  <data name="MoveCloserToUsageFailure_ReferencingMethodHasSameNameDeclarationInScope" xml:space="preserve">
    <value>La procédure qui utilise '{0}' contient déjà une déclaration '{1}' utilisant cet identifiant.</value>
  </data>
  <data name="MoveCloserToUsageFailure_TargetHasNoReferences" xml:space="preserve">
    <value>'{0}' n'est jamais utilisé.</value>
  </data>
  <data name="MoveCloserToUsageFailure_TargetIsInDifferentProject" xml:space="preserve">
    <value>'{0}' doit être défini dans le même projet que la cible.</value>
  </data>
  <data name="MoveCloserToUsageFailure_TargetIsInOtherNonStandardModule" xml:space="preserve">
    <value>'{0}' n'est utilisé ni dans le module où il est défini, ni dans un module standard.</value>
  </data>
  <data name="MoveCloserToUsageFailure_TargetIsNonPrivateInNonStandardModule" xml:space="preserve">
    <value>'{0}' est accessible globalement, et est utilisé.</value>
  </data>
  <data name="MoveCloserToUsageFailure_TargetIsNotUserDefined" xml:space="preserve">
    <value>'{0}' n'est pas défini par l'utilisateur.</value>
  </data>
  <data name="MoveCloserToUsageFailure_TargetIsUsedInMultipleMethods" xml:space="preserve">
    <value>'{0}' est utilisé dans plus d'une méthode.</value>
  </data>
  <data name="MoveFolders_SameNameSubfolder" xml:space="preserve">
    <value>Le dossier cible '{0}' contient déjà un sous-dossier nommé '{1}'. Déplacer ce dossier le fusionnera au dossier existant.
Procéder?</value>
  </data>
  <data name="MoveFolderDialog_InstructionsLabelText" xml:space="preserve">
    <value>Veuillez spécifier un nouveau dossier parent pour le sous-dossier '{0}' de '{1}'.</value>
  </data>
  <data name="MoveFolders_ControlCharacter" xml:space="preserve">
    <value>Un nom de dossier ne peut pas contenir certains caractères de contrôle, tels qu'un saut de ligne.</value>
  </data>
  <data name="MoveFolders_EmptyFolderName" xml:space="preserve">
    <value>Un nom de dossier ne peut être vide.</value>
  </data>
  <data name="MoveFolders_EmptySubfolderName" xml:space="preserve">
    <value>Les noms des sous-dossiers ne peuvent pas être vides.</value>
  </data>
  <data name="MoveFolders_SameNameSourceFolders" xml:space="preserve">
    <value>Plusieurs dossiers portant le même nom seront déplacés. Cette action les fusionnera.
Procéder?</value>
  </data>
  <data name="MoveFolders_SameNameSubfolders" xml:space="preserve">
    <value>Le dossier cible '{0}' contient déjà les dossiers {1}. Déplacer ces dossiers les fusionnera aux dossiers existants.
Procéder?</value>
  </data>
  <data name="MoveFoldersDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Déplacer les Dossiers</value>
  </data>
  <data name="MoveFoldersDialog_InstructionsLabelText" xml:space="preserve">
    <value>Veuillez spécifier un nouveau dossier parent.</value>
  </data>
  <data name="MoveFoldersDialog_TitleText" xml:space="preserve">
    <value>Déplacer les dossiers</value>
  </data>
  <data name="MoveMultipleToFolderDialog_InstructionsLabelText" xml:space="preserve">
    <value>Veuillez spécifier le dossier où déplacer ces composants.</value>
  </data>
  <data name="MoveRootFolderDialog_InstructionsLabelText" xml:space="preserve">
    <value>Veuillez spécifier un nouveau dossier parent pour '{0}'.</value>
  </data>
  <data name="MoveToFolderDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Déplacer vers un Dossier</value>
  </data>
  <data name="MoveToFolderDialog_FolderLabelText" xml:space="preserve">
    <value>Dossier:</value>
  </data>
  <data name="MoveToFolderDialog_InstructionsLabelText" xml:space="preserve">
    <value>Veuillez spécifier un nouveau dossier pour {0} '{1}' dans le dossier '{2}'.</value>
  </data>
  <data name="MoveToFolderDialog_TitleText" xml:space="preserve">
    <value>Déplacer vers un dossier</value>
  </data>
  <data name="RefactoringFailure_InvalidDeclarationType_multipleValid" xml:space="preserve">
    <value>Le type de déclaration de la cible '{0}' est '{1}', mais le type attendu était '{2}'.</value>
  </data>
  <data name="Refactoring_TargetIsInterfaceMemberImplementation" xml:space="preserve">
    <value>La méthode '{0}' implémente '{1}.{2}'. Modifier la signature de l'interface? (cette modification serait propagée à toutes les implémentations)</value>
  </data>
  <data name="RefactoringFailure_AffectedModuleIsStale" xml:space="preserve">
    <value>Le composant '{0}' aurait été affecté par la refactorisation, mais sa représentation interne à Rubberduck est périmée. Veuillez actualiser Rubberduck et réessayer.</value>
  </data>
  <data name="RefactoringFailure_AnnotateDeclaration_InvalidType" xml:space="preserve">
    <value>Le refactoring ne peut annoter que les composants, les membres et les variables, mais la cible était de type '{0}'.</value>
  </data>
  <data name="RefactoringFailure_BaseMessage" xml:space="preserve">
    <value>Échec du refactoring.</value>
  </data>
  <data name="RefactoringFailure_InvalidDeclarationType" xml:space="preserve">
    <value>Le type de déclaration de la cible '{0}' est '{1}', plutôt que '{2}' tel qu'attendu.</value>
  </data>
  <data name="RefactoringFailure_NoActiveSelection" xml:space="preserve">
    <value>Cette opération requiert une sélection active.</value>
  </data>
  <data name="RefactoringFailure_NoTargetDeclarationForSelection" xml:space="preserve">
    <value>La sélection ne semble pas contenir de déclaration utilisable.</value>
  </data>
  <data name="RefactoringFailure_NoTargetFolder" xml:space="preserve">
    <value>Aucune cible n'a été spécifiée.</value>
  </data>
  <data name="RefactoringFailure_SuspendParserFailure" xml:space="preserve">
    <value>Impossible de suspendre l'analyse en cours pour effectuer le refactoring.</value>
  </data>
  <data name="RefactoringFailure_TargetNotUserDefined" xml:space="preserve">
    <value>La cible n'est pas définie par l'utilisateur.</value>
  </data>
  <data name="RefactoringFailure_TargetNull" xml:space="preserve">
    <value>La déclaration ciblée est 'null', ...poof?</value>
  </data>
  <data name="RemoveParamsDialog_RemoveIllegalSetterLetterParameter" xml:space="preserve">
    <value>Les accesseurs Property Let et Property Set requièrent au moins un paramètre.</value>
  </data>
  <data name="RemoveParamsDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Supprimer les paramètres</value>
  </data>
  <data name="RemoveParamsDialog_InstructionsLabelText" xml:space="preserve">
    <value>Sélectionner un paramètre et utiliser les boutons ou un double-clic pour le supprimer.</value>
  </data>
  <data name="RemoveParamsDialog_TitleText" xml:space="preserve">
    <value>Supprimer les paramètres</value>
  </data>
  <data name="Rename_DeclarationType" xml:space="preserve">
    <value>Renommer {0}</value>
  </data>
  <data name="RenameDialog_AmbiguousSelection" xml:space="preserve">
    <value>Veuillez sélectionner 1 seul contrôle à renommer.</value>
  </data>
  <data name="RenameDialog_BuiltInNameError" xml:space="preserve">
    <value>{0}{1} ne peut être renommé.</value>
  </data>
  <data name="RenameDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Renommer</value>
  </data>
  <data name="RenameDialog_ConflictingNames" xml:space="preserve">
    <value>Le nom '{0}' entre en collision avec '{1}', ayant la même portée. Renommer '{2}' à '{0}' peut résulter en code non-compilable ou sournoisement modifier la logique du code appelant.
Continuer?</value>
  </data>
  <data name="RenameDialog_DefaultRenameError" xml:space="preserve">
    <value>Impossible de renommer {0}.</value>
  </data>
  <data name="RenameDialog_Folder" xml:space="preserve">
    <value>dossier</value>
  </data>
  <data name="RenameDialog_FolderAlreadyExists" xml:space="preserve">
    <value>Le dossier '{0}' existe déjà. Renommer '{1}' à '{2}' fusionnera les deux dossiers.
Procéder?</value>
  </data>
  <data name="RenameDialog_FolderLabel" xml:space="preserve">
    <value>Dossier:</value>
  </data>
  <data name="RenameDialog_FullNewFolderLabel" xml:space="preserve">
    <value>Nouveau dossier (chemin complet):</value>
  </data>
  <data name="RenameDialog_InstructionsLabelText" xml:space="preserve">
    <value>Veuillez spécifier un nouveau nom pour {0} '{1}'.</value>
  </data>
  <data name="RenameDialog_InterfaceRenameError" xml:space="preserve">
    <value>Impossible de renommer le membre '{0}' de l'interface.</value>
  </data>
  <data name="RenameDialog_OnlyCasingDifferent" xml:space="preserve">
    <value>Impossible de modifier la casse d'un identifiant VBA (le language est insensible à la casse).</value>
  </data>
  <data name="RenameDialog_TitleText" xml:space="preserve">
    <value>Renommer l'identifiant</value>
  </data>
  <data name="RenameDialog_TitleText_Folder" xml:space="preserve">
    <value>Renommer le dossier</value>
  </data>
  <data name="RenameFailure_StandardEventHandler" xml:space="preserve">
    <value>La cible '{0}' est une procédure gestionnaire d'événements, impossible de renommer cette pocédure sans briser quelque chose!</value>
  </data>
  <data name="RenameFailure_TargetControlNotFound" xml:space="preserve">
    <value>Le contrôle ciblé '{0}' est introuvable.</value>
  </data>
  <data name="RenameFailure_TargetModuleWithoutCodeModule" xml:space="preserve">
    <value>Le module ciblé '{0}' n'est plus trouvable!</value>
  </data>
  <data name="RenamePresenter_TargetIsControlEventHandler" xml:space="preserve">
    <value>La méthode {0} répond aux événements du contrôle '{1}'. Renommer '{1}'?</value>
  </data>
  <data name="RenamePresenter_TargetIsEventHandlerImplementation" xml:space="preserve">
    <value>La méthode '{0}' répond à l'événement '{1}.{2}'. Renommer l'événement '{2}'?</value>
  </data>
  <data name="RenamePresenter_TargetIsInterfaceMemberImplementation" xml:space="preserve">
    <value>La méthode '{0}' implémente '{1}.{2}'. Modifier l'interface? (cette modification serait propagée à toutes les implémentations)</value>
  </data>
  <data name="RemovePresenter_NoParametersError" xml:space="preserve">
    <value>La méthode '{0}' n'a pas de paramètres.</value>
  </data>
  <data name="ReorderParamsDialog_MoveUpButtonText" xml:space="preserve">
    <value>Déplacer vers le haut</value>
  </data>
  <data name="ReorderParamsDialog_Caption" xml:space="preserve">
    <value>Rubberduck - Modifier l'ordre des paramètres</value>
  </data>
  <data name="ReorderParamsDialog_InstructionsLabelText" xml:space="preserve">
    <value>Veuillez sélectionner un paramètre et glisser-déposer, ou utilisez les boutons pour modifier l'ordre.</value>
  </data>
  <data name="ReorderParamsDialog_MoveDownButtonText" xml:space="preserve">
    <value>Déplacer vers le bas</value>
  </data>
  <data name="ReorderParamsDialog_TitleText" xml:space="preserve">
    <value>Modifier l'ordre des paramètres</value>
  </data>
  <data name="ReorderPresenter_LessThanTwoParametersError" xml:space="preserve">
    <value>La méthode '{0}' compte moins de deux paramètres.</value>
  </data>
  <data name="AnnotationArgument_ValidationError_NotANumber" xml:space="preserve">
    <value>La valeur des arguments de type 'Number' doit être un nombre entier ou décimal valide.</value>
  </data>
  <data name="ReorderPresenter_OptionalParametersMustBeLastError" xml:space="preserve">
    <value>Les paramètres optionels doivent être spéficiés à la fin de la liste.</value>
  </data>
  <data name="AnnotationArgumentType_Text" xml:space="preserve">
    <value>Texte</value>
  </data>
  <data name="AnnotationArgumentType_Attribute" xml:space="preserve">
    <value>Attribut</value>
  </data>
  <data name="AnnotationArgumentType_Boolean" xml:space="preserve">
    <value>Valeur Booléenne</value>
  </data>
  <data name="AnnotationArgumentType_Inspection" xml:space="preserve">
    <value>AnnotationArgumentType_Inspection</value>
  </data>
  <data name="AnnotationArgumentType_Number" xml:space="preserve">
    <value>AnnotationArgumentType_Number</value>
  </data>
</root>